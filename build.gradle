buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.6'
    }
}

ext {
    artifactIdBaseName = 'http-requests'
}

version = 1.0
group = 'com.budjb'

subprojects {
    apply plugin: 'groovy'

    version = rootProject.version
    group = rootProject.group

    repositories {
        mavenCentral()
        jcenter()
    }

    sourceCompatibility = 1.6
    targetCompatibility = 1.6
}

configure(subprojects.findAll { it.name != 'test' }) {
    apply plugin: 'maven-publish'
    apply plugin: 'com.jfrog.bintray'

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    artifacts {
        archives sourcesJar
        archives javadocJar
    }

    publishing {
        publications {
            maven(MavenPublication) {
                artifactId "${artifactIdBaseName}-${project.name}"

                from components.java

                artifact sourcesJar {
                    classifier 'sources'
                }

                artifact javadocJar {
                    classifier 'javadoc'
                }

                pom.withXml {
                    def xml = asNode()

                    xml.appendNode 'name', project.name
                    xml.appendNode 'description', projectDescription
                    xml.appendNode 'url', 'https://github.com/budjb/http-requests'

                    def licenses = xml.appendNode 'licenses'
                    def license = licenses.appendNode 'license'
                    license.appendNode 'name', 'The Apache Software License, Version 2.0'
                    license.appendNode 'url', 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    license.appendNode 'distribution', 'repo'

                    def scm = xml.appendNode 'scm'
                    scm.appendNode 'url', 'scm:git@github.com:budjb/http-requests.git'
                    scm.appendNode 'connection', 'git@github.com:budjb/http-requests.git'
                    scm.appendNode 'developerConnection', 'git@github.com:budjb/http-requests.git'

                    def developers = xml.appendNode 'developers'
                    def developer = developers.appendNode 'developer'
                    developer.appendNode 'id', 'budjb'
                    developer.appendNode 'name', 'Bud Byrd'
                }
            }
        }
    }

    bintray {
        user = System.getenv('BINTRAY_USER')
        key = System.getenv('BINTRAY_KEY')
        publications = ['maven']
        publish = true
        pkg {
            repo = 'generic' // TODO: change this
            name = "${artifactIdBaseName}-${project.name}"
            desc = projectDescription
            websiteUrl = 'https://github.com/budjb/http-requests'
            issueTrackerUrl = 'https://github.com/budjb/http-request/issues'
            vcsUrl = 'https://github.com/budjb/http-requests.git'
            licenses = ['Apache-2.0']
            publicDownloadNumbers = true
            githubRepo = 'budjb/http-requests'
            githubReleaseNotesFile = 'README.md'
            version {
                released = new Date()
                vcsTag = project.version
            }
        }
    }
}

configure(subprojects.findAll { !(it.name in ['test', 'core']) }) {
    sourceSets {
        integrationTest {
            groovy {
                compileClasspath += main.output
                runtimeClasspath += main.output
                srcDir file('src/integration-test/groovy')
            }
            resources {
                srcDir file('src/integration-test/resources')
            }
        }
    }

    configurations {
        integrationTestCompile.extendsFrom testCompile
        integrationTestRuntime.extendsFrom testRuntime
    }

    task(type: Test, 'integrationTest') {
        group 'Verification'
        description 'Run integration tests.'

        testClassesDir = sourceSets.integrationTest.output.classesDir
        classpath = sourceSets.integrationTest.runtimeClasspath

        include '**/*Spec.*'
        systemProperty 'spring.profiles.active', 'integration'
    }.shouldRunAfter test
    check.dependsOn integrationTest

    dependencies {
        integrationTestCompile project(':test')
    }
}

project(':core') {
    dependencies {
        compile 'org.slf4j:slf4j-api:1.7.13'
        compile 'org.codehaus.groovy:groovy-all:2.4.6'

        testCompile "org.spockframework:spock-core:1.0-groovy-2.4"
        testCompile "org.hamcrest:hamcrest-core:1.3"
        testRuntime "cglib:cglib-nodep:3.1"
        testRuntime "org.objenesis:objenesis:2.1"
    }
}

project(':test') {
    dependencies {
        compile project(':core')
        compile 'org.springframework.boot:spring-boot-starter-web:1.3.3.RELEASE'
        compile 'org.springframework:spring-test:4.2.5.RELEASE'
        compile 'org.spockframework:spock-spring:1.0-groovy-2.4'
    }
}

project(':jersey1') {
    dependencies {
        compile project(':core')
        compile 'com.sun.jersey:jersey-client:1.19'
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.9'
}
